{"name":"Memorystorage","tagline":"Memory-backed storage object that implements the Web Storage API","body":"# memorystorage <sub><sup>v0.9.9</sup></sub>\r\nMemory-backed storage that implements the [Web Storage API](http://www.w3.org/TR/webstorage/), making it a drop-in replacement for `localStorage` and `sessionStorage` in environments where these are not available. \r\n\r\n## Download\r\n* [memorystorage.umd.js](https://cdn.rawgit.com/download/memorystorage/0.9.9/src/memorystorage.umd.js) (~4kB, commented)\r\n* [memorystorage.min.js](https://cdn.rawgit.com/download/memorystorage/0.9.9/dist/memorystorage.min.js) (~2kB, minified)\r\n* [memorystorage.min.js.map](https://cdn.rawgit.com/download/memorystorage/0.9.9/dist/memorystorage.min.js.map) (~2kB, debug map file)\r\n\r\n## Include on your page\r\n`memorystorage` can be used directly from CDN, from a local script file, or from a module loader.\r\n\r\n### CDN\r\nThis is by far the easiest method and gives good performance to boost. Use this if you are in doubt.\r\n```xml\r\n<script src=\"https://cdn.rawgit.com/download/memorystorage/0.9.9/dist/memorystorage.min.js\"></script>\r\n```\r\n\r\n### Local script file\r\nDownload memorystorage.min.js, place it in a folder `lib` in the root of your website and include it like this:\r\n```xml\r\n<script src=\"lib/memorystorage.min.js\"></script>\r\n```\r\n\r\n### Module loaders\r\nMemorystorage implements the Universal Module Pattern and as such, is available to be consumed\r\nfrom Node modules as well as via an AMD loader such as RequireJS. \r\n\r\n#### Node \r\n```javascript\r\nvar MemoryStorage = require('memorystorage');\r\n// here, the MemoryStorage function is available\r\nvar myStorage = new MemoryStorage('my-app');\r\n```\r\n\r\n#### AMD\r\n```javascript\r\ndefine(['memorystorage'], function(MemoryStorage){\r\n\t// here, the MemoryStorage function is available\r\n\tvar myStorage = new MemoryStorage('my-app');\r\n});\r\n```\r\nTo be able to load MemoryStorage from CDN as an AMD module, configure the CDN url like so <small>(note the absence of `.js` in the url)</small>:\r\n```javascript\r\nrequire.config({\r\n\tpaths: {\r\n\t\t'memorystorage': 'https://cdn.rawgit.com/download/memorystorage/0.9.9/dist/memorystorage.min'\r\n\t}\r\n});\r\n```\r\n\r\n## Create a memory storage object\r\nThe `MemoryStorage` function creates (or returns) a storage object implementing the W3C Web Storage API.\r\nBy default, scripts share a `global` storage object, so scripts can access and mutate each other's store\r\nobject. To have MemoryStorage create a storage object that is isolated from other scripts, you pass in\r\na unique ID which acts as a namespace:\r\n\r\n```javascript\r\nvar isolated = new MemoryStorage('my-app'); // isolated from other scripts, recommended.\r\n```\r\n\r\nIf you don't pass in an ID, or use the ID `'global'`, you get a globally shared storage object:\r\n\r\n```javascript\r\nvar global = new MemoryStorage(); // will default to a globally shared storage object.\r\nvar global2 = new MemoryStorage('global'); // effectively same as above\r\n```\r\n\r\nFor your convenience, the constructor permits `new`-less invocation:\r\n```javascript\r\nvar store = MemoryStorage('my-store');\r\nvar global = MemoryStorage();\r\n```\r\n\r\nInstances of `MemoryStorage` expose an immutable `id` property that is set to\r\nthe id the store was created with:\r\n\r\n```javascript\r\nalert(store.id); // alerts 'my-store'\r\nalert(global.id); // alerts 'global'\r\n```\r\n\r\n## Use it\r\n```javascript\r\nstore.setItem('myString', 'Hello MemoryStorage!');\r\nstore.myObject = JSON.stringify({my: 'object'}));\r\nalert(store.getItem('My string')); // alerts 'Hello MemoryStorage!'\r\nalert(store['My string']); // alerts 'Hello MemoryStorage!'\r\nalert(store.length); // alerts '2'\r\nalert(store.key(1)); // alerts 'My object'\r\nstore.removeItem('My string');\r\nalert(store.length); // alerts '1'\r\nstore.clear();\r\nalert(store.length); // alerts '0'\r\n```\r\n\r\n## Beyond the Web Storage API\r\nMemoryStorage is type-agnostic; it doesn't care about the type of data you store. \r\nIf you want to remain within the Web Storage API, you should only read and write strings, \r\nhowever if you want you can store other types just as well:\r\n```javascript\r\nstore.myObject = {my: 'object'};\r\nalert(store.myObject.my); // alerts 'object'\r\nvar tree = {\r\n\tnested: {\r\n\t\tobjects: {\r\n\t\t\tworking: 'Sure!'\r\n\t\t}\r\n\t}\r\n}\r\nstore.setItem('tree', tree);\r\nalert(store.tree.nested.objects.working); // alerts 'Sure!'\r\n```\r\n\r\n## Copyright\r\nCopyright 2015 by Stijn de Witt. Some rights reserved.\r\n\r\n## License\r\nLicensed under the [Creative Commons Attribution 4.0 International (CC-BY-4.0)](https://creativecommons.org/licenses/by/4.0/) Open Source license.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}